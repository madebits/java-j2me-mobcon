## @param vdoclet.docinfo.DocInfo $docInfo
## @param vdoclet.Generator $vdoclet
## @param ClassTemplate $CT from Control.vm
## $docInfo is Class vdoclet.docinfo.DocInfo $docInfo
## $vdoclet is Class vdoclet.Generator
#****** Generate Helper Variables ******
*#
#set($StringUtils = $vdoclet.makeBean("org.apache.velocity.util.StringUtils"))
#set($varMap = $vdoclet.makeBean("java.util.Hashtable"))
#set($pkVec = $vdoclet.makeBean("java.util.Vector"))
#set($storeVec = $vdoclet.makeBean("java.util.Vector"))
#set($st = '"')
##
#****** Initialize the Dictionary ******#
#set($tagDic = $transformer.getTagDic())


##If the tag @dbo.use is set, then a DBO will be used from this application
#set($tag = false)
#set($tag = $class.getTag($tagDic.getTag("use")))
#if ($tag)
  #set($Array = $StringUtils.split($tag.value, " "))
  #foreach($element in $Array)
    #set($MT = $vdoclet.makeBean("mobcon.ct.MethodTemplate"))
    $MT.setAccess("public")
    $MT.setName("${MAINCT.getName()}")
    $MT.addEnd("try{")
    $MT.addEnd("${element}s = new ${element}Store();")
    $MT.addEnd("${element}s.initStore();")
    $MT.addEnd("}catch(Exception e){System.out.println(e);}")
    $CT.addMethod($MT, $tagDic.getPrefix())
    #set($FT = $vdoclet.makeBean("mobcon.ct.FieldTemplate"))
    $FT.setAccess("protected")
    $FT.setType("${element}Store")
    $FT.setName("${element}s")
    $FT.setValue("null")
    $CT.addField($FT, $tagDic.getPrefix())

    ## Close the store
    #set($MT = $vdoclet.makeBean("mobcon.ct.MethodTemplate"))
    $MT.setAccess("public")
    $MT.setType("void")
    $MT.setName("destroyApp")
    #set($FT = $vdoclet.makeBean("mobcon.ct.FieldTemplate"))
    $FT.setType("boolean")
    $FT.setName("unconditional")
    $MT.addParameter($FT)
    $MT.addEnd("try{")
    $MT.addEnd("${element}s.closeStore();")
    $MT.addEnd("}catch(Exception e){System.out.println(e);}")
    $CT.addMethod($MT, $tagDic.getPrefix())
  #end
#end
## END @dbo.use ##



##If the concern-tag (here @dbo) is set, parse the file
#set($tag = false)
#set($tag = $class.getTag("$tagDic.getPrefix()"))
#if ($tag)

#************************#
#******** MACROS ********#
#************************#

##
##
#****** Macro dbo_default_value******
# Function: Generates the Default-Values (-1, *)
# Note: Double and float are not yet supported by J2ME
*#
#macro(dbo_default_value $type $name)
  ## default-value
  #set($value = "null")

  #if($type == "boolean")
    #set($value = "false")
  #end
  #if($type == "byte")
    #set($value = "0")
  #end
  #if($type == "char")
    #set($value = "0")
  #end
  #if($type == "double")
    #set($value = "-1")
  #end
  #if($type == "float")
    #set($value = "-1")
  #end
  #if($type == "int")
    #set($value = "-1")
  #end
  #if($type == "long")
    #set($value = "-1")
  #end
  #if($type == "short")
    #set($value = "-1")
  #end
  #if($type == "java.lang.String")
    #set($value = '"*"')
  #end

  #set($allName = "All$StringUtils.capitalizeFirstLetter($name)")

  #set($FT = $vdoclet.makeBean("mobcon.ct.FieldTemplate"))
  $FT.setAccess("public static final")
  $FT.setType("$type")
  $FT.setName("$allName")
  $FT.setValue("$value")
  $CT.addField($FT, $tagDic.getPrefix())
#end


##
##
#****** Macro dbo_meth_get******
# Function: Generates the get-Method of the Field
*#
#macro(dbo_meth_get $type $name)
  #set($MT = $vdoclet.makeBean("mobcon.ct.MethodTemplate"))
  $MT.setAccess("public")
  $MT.setType("$type")
  $MT.setName("get$StringUtils.capitalizeFirstLetter($name)")
  $MT.addEnd("return $name;")
  $CT.addMethod($MT)
#end


##
##
#****** Macro dbo_meth_set******
# Function:
# - Generates the set-Method of the Field
*#
#macro(dbo_meth_set $type $name)
  #set($MT = $vdoclet.makeBean("mobcon.ct.MethodTemplate"))
  $MT.setAccess("public")
  $MT.setType("void")
  $MT.setName("set$StringUtils.capitalizeFirstLetter($name)")
  $MT.addException("Exception")
  #set($FT = $vdoclet.makeBean("mobcon.ct.FieldTemplate"))
  $FT.setType("$type")
  $FT.setName("value")
  $MT.addParameter($FT)
  #if($type == "java.lang.String")
    $MT.addBody("if(value.equals(All$StringUtils.capitalizeFirstLetter($name))){")
  #else
    $MT.addBody("if(value != All$StringUtils.capitalizeFirstLetter($name)){")
  #end
  #if($type == "java.lang.String")
    $MT.addBody("value = CTX.noNull(value);")
  #end
  
  $MT.addBody("if(!CTX.validate(value, min$StringUtils.capitalizeFirstLetter($name), max$StringUtils.capitalizeFirstLetter($name)))")
  $MT.addBody("throw new Exception($st validate $name $st);")
  $MT.addBody("$name = value;")
  $MT.addBody("}else{")
  $MT.addBody("$name = value;")
  $MT.addBody("}")
  $CT.addMethod($MT)
#end

#****** Macro dbo_gen_constructor******
# Function: Generates the Constructors No-Arg / with Args
*#
#macro(dbo_gen_constructor $class)
  #set($MT = $vdoclet.makeBean("mobcon.ct.MethodTemplate"))
  $MT.setAccess("public")
  $MT.setName("${MAINCT.getName()}")

  #foreach($field in $class.fields)
    #set($FT = $vdoclet.makeBean("mobcon.ct.FieldTemplate"))
    $FT.setName("$field.name")
    $FT.setValue("All$StringUtils.capitalizeFirstLetter($field.name)")
    $MT.addField($FT)
  #end
  $CT.addMethod($MT)

  #set($MT = $vdoclet.makeBean("mobcon.ct.MethodTemplate"))
  $MT.setAccess("public")
  $MT.setName("${MAINCT.getName()}")
  $MT.addBegin("try{")

  #foreach($field in $class.fields)
    #set($FT = $vdoclet.makeBean("mobcon.ct.FieldTemplate"))
    $FT.setType("$field.Type")
    $FT.setName("$field.Name")
    $MT.addParameter($FT)
    $MT.addBody("set$StringUtils.capitalizeFirstLetter($field.name)($field.name);")
  #end
  $MT.addEnd("}catch(Exception e){e.printStackTrace();}")
  $CT.addMethod($MT)
#end

##
##
#****** Macro dbo_gen_field******
# Function:
# - Generates the Fields
*#
#macro(dbo_gen_field $field)
  #set($FT = $vdoclet.makeBean("mobcon.ct.FieldTemplate"))
  $FT.setAccess("private")
  $FT.setType("$field.getType()")
  $FT.setName("$field.name")
  $CT.addField($FT)

  ## Set the min/max-Values
  #set($tag = false)
  #set($tag = $field.getTag($tagDic.getTag("minValue")))
  #if($tag)
    #set($min = $tag.value)
    #set($minName = "min$StringUtils.capitalizeFirstLetter($field.name)")
    #set($FT = $vdoclet.makeBean("mobcon.ct.FieldTemplate"))
    $FT.setAccess("private")
    $FT.setType("int")
    $FT.setName("$minName")
    $FT.setValue("$min")
    $CT.addField($FT)
  #end

  #set($tag = false)
  #set($tag = $field.getTag($tagDic.getTag("maxValue")))
  #if($tag)
    #set($max = $tag.value)
    #set($maxName = "max$StringUtils.capitalizeFirstLetter($field.name)")
    #set($FT = $vdoclet.makeBean("mobcon.ct.FieldTemplate"))
    $FT.setAccess("private")
    $FT.setType("int")
    $FT.setName("$maxName")
    $FT.setValue("$max")
    $CT.addField($FT)
  #end

  #dbo_default_value ($field.getType() $field.name)

  #dbo_meth_get($field.getType() $field.name)

  #dbo_meth_set($field.getType() $field.name)
#end


##
##
#****** Macro dbo_gen_compare******
# Function: Generates the compare-Method
*#
#macro(dbo_gen_compare $field $order)
  #set($MT = $vdoclet.makeBean("mobcon.ct.MethodTemplate"))
  $MT.setAccess("public")
  $MT.setType("int")
  $MT.setName("compare")
  #set($FT = $vdoclet.makeBean("mobcon.ct.FieldTemplate"))
  $FT.setType("${MAINCT.getName()}")
  $FT.setName("o")
  $MT.addParameter($FT)

  $MT.addBegin("int result = RecordComparator.EQUIVALENT;")
  #foreach ($field in $class.fields)
    ## Generates Compare-Method, if sort-tag found
    #set($tag = false)
    #set($tag = $field.getTag($tagDic.getTag("sort")))
    #if ($tag)  
      $MT.addBody("if(result == RecordComparator.EQUIVALENT){")
      #if($field.getType() == "java.lang.String")
        #if($order=="asc")
          $MT.addBody("if(this.${field.name}.compareTo(o.${field.name}) < 0) return RecordComparator.PRECEDES;");
          $MT.addBody("else if(this.${field.name}.compareTo(o.${field.name}) > 0) return RecordComparator.FOLLOWS;")    
        #else
          $MT.addBody("if(this.${field.name}.compareTo(o.${field.name}) > 0) return RecordComparator.PRECEDES;");
          $MT.addBody("else if(this.${field.name}.compareTo(o.${field.name}) < 0) return RecordComparator.FOLLOWS;")    
        #end    
      #else
        #set($body = "if($field.Name ")
        #if($order=="asc")
          #set($body = "$body<")
        #else
          #set($body = "$body>")
        #end
        #set($body = "$body o.$field.Name) return RecordComparator.PRECEDES;")
        $MT.addBody("$body");
        #set($body = "else if($field.Name ")
        #if($order=="asc")
          #set($body = "$body>")
        #else
          #set($body = "$body<")
        #end
        #set($body = "$body o.$field.Name) return RecordComparator.FOLLOWS;")
        $MT.addBody("$body");    
      #end

      $MT.addBody("else result = RecordComparator.EQUIVALENT;")
      $MT.addBody("}")
    #end

  #end

  $MT.addEnd("return result;")
  $CT.addMethod($MT)
#end


##
##
#****** Macro dp_gen_object2record******
# Function: Generates the object2record-Method, if there are Fields to store
*#
#macro(dbo_gen_object2record)
  #set($MT = $vdoclet.makeBean("mobcon.ct.MethodTemplate"))
  $MT.setAccess("public")
  $MT.setType("byte[]")
  $MT.setName("object2record")
  $MT.addException("IOException")
  #set($FT = $vdoclet.makeBean("mobcon.ct.FieldTemplate"))
  $FT.setType("ByteArrayOutputStream")
  $FT.setName("baos")
  $FT.setValue("new ByteArrayOutputStream()")
  $MT.addField($FT, $tagDic.getPrefix())
  #set($FT = $vdoclet.makeBean("mobcon.ct.FieldTemplate"))
  $FT.setType("DataOutputStream")
  $FT.setName("outputStream")
  $FT.setValue("new DataOutputStream(baos)")
  $MT.addField($FT, $tagDic.getPrefix())

  $MT.addBody("byte[] out;")
  #foreach ($storeField in $storeVec)
    #if($storeField.getType() == "java.lang.String")
      $MT.addBody("outputStream.writeUTF(this.get$StringUtils.capitalizeFirstLetter($storeField.name)());")
    #elseif($storeField.getType() == "boolean")
      $MT.addBody("outputStream.write$StringUtils.capitalizeFirstLetter($storeField.getType())(this.get$StringUtils.capitalizeFirstLetter($storeField.name)());")
    #elseif($storeField.getType() == "byte")
      $MT.addBody("outputStream.write$StringUtils.capitalizeFirstLetter($storeField.getType())(this.get$StringUtils.capitalizeFirstLetter($storeField.name)());")
    #elseif($storeField.getType() == "char")
      $MT.addBody("outputStream.write$StringUtils.capitalizeFirstLetter($storeField.getType())(this.get$StringUtils.capitalizeFirstLetter($storeField.name)());")
    #elseif($storeField.getType() == "double")
      $MT.addBody("outputStream.write$StringUtils.capitalizeFirstLetter($storeField.getType())(this.get$StringUtils.capitalizeFirstLetter($storeField.name)());")
    #elseif($storeField.getType() == "float")
      $MT.addBody("outputStream.write$StringUtils.capitalizeFirstLetter($storeField.getType())(this.get$StringUtils.capitalizeFirstLetter($storeField.name)());")
    #elseif($storeField.getType() == "int")
      $MT.addBody("outputStream.write$StringUtils.capitalizeFirstLetter($storeField.getType())(this.get$StringUtils.capitalizeFirstLetter($storeField.name)());")
    #elseif($storeField.getType() == "long")
      $MT.addBody("outputStream.write$StringUtils.capitalizeFirstLetter($storeField.getType())(this.get$StringUtils.capitalizeFirstLetter($storeField.name)());")
    #elseif($storeField.getType() == "short")
      $MT.addBody("outputStream.write$StringUtils.capitalizeFirstLetter($storeField.getType())(this.get$StringUtils.capitalizeFirstLetter($storeField.name)());")
    #else
      $MT.addBody("if($storeField.name == null){")
      $MT.addBody("$storeField.name = new ${storeField.type}();")
      $MT.addBody("}")
      $MT.addBody("out = (this.get$StringUtils.capitalizeFirstLetter($storeField.name)()).object2record();")
      $MT.addBody("outputStream.writeInt(out.length);")
      $MT.addBody("outputStream.write(out);")
    #end

  #end
  $MT.addEnd("return baos.toByteArray();")
  $CT.addMethod($MT, $tagDic.getPrefix())
#end


##
##
#****** Macro #dbo_gen_record2object******
# Function: Generates the record2object-Method, if there are Fields to store
*#
#macro(dbo_gen_record2object)

  #set($MT = $vdoclet.makeBean("mobcon.ct.MethodTemplate"))
  $MT.setAccess("public")
  $MT.setType("void")
  $MT.setName("record2object")
  #set($FT = $vdoclet.makeBean("mobcon.ct.FieldTemplate"))
  $FT.setType("byte[]")
  $FT.setName("rec")
  $MT.addParameter($FT)
  $MT.addException("Exception")
  #set($FT = $vdoclet.makeBean("mobcon.ct.FieldTemplate"))
  $FT.setType("ByteArrayInputStream")
  $FT.setName("bais")
  $FT.setValue("new ByteArrayInputStream(rec)")
  $MT.addField($FT, $tagDic.getPrefix())
  #set($FT = $vdoclet.makeBean("mobcon.ct.FieldTemplate"))
  $FT.setType("DataInputStream")
  $FT.setName("inputStream")
  $FT.setValue("new DataInputStream(bais)")
  $MT.addField($FT, $tagDic.getPrefix())

  $MT.addBody("byte[] out;")
  #foreach ($storeField in $storeVec)
    #if($storeField.getType() == "java.lang.String")
      $MT.addBody("this.set$StringUtils.capitalizeFirstLetter($storeField.name)(inputStream.readUTF());")
    #elseif($storeField.getType() == "boolean")
      $MT.addBody("this.set$StringUtils.capitalizeFirstLetter($storeField.name)(inputStream.read$StringUtils.capitalizeFirstLetter($storeField.getType())());")
    #elseif($storeField.getType() == "byte")
      $MT.addBody("this.set$StringUtils.capitalizeFirstLetter($storeField.name)(inputStream.read$StringUtils.capitalizeFirstLetter($storeField.getType())());")
    #elseif($storeField.getType() == "char")
      $MT.addBody("this.set$StringUtils.capitalizeFirstLetter($storeField.name)(inputStream.read$StringUtils.capitalizeFirstLetter($storeField.getType())());")
    #elseif($storeField.getType() == "double")
      $MT.addBody("this.set$StringUtils.capitalizeFirstLetter($storeField.name)(inputStream.read$StringUtils.capitalizeFirstLetter($storeField.getType())());")
    #elseif($storeField.getType() == "float")
      $MT.addBody("this.set$StringUtils.capitalizeFirstLetter($storeField.name)(inputStream.read$StringUtils.capitalizeFirstLetter($storeField.getType())());")
    #elseif($storeField.getType() == "int")
      $MT.addBody("this.set$StringUtils.capitalizeFirstLetter($storeField.name)(inputStream.read$StringUtils.capitalizeFirstLetter($storeField.getType())());")
    #elseif($storeField.getType() == "long")
      $MT.addBody("this.set$StringUtils.capitalizeFirstLetter($storeField.name)(inputStream.read$StringUtils.capitalizeFirstLetter($storeField.getType())());")
    #elseif($storeField.getType() == "short")
      $MT.addBody("this.set$StringUtils.capitalizeFirstLetter($storeField.name)(inputStream.read$StringUtils.capitalizeFirstLetter($storeField.getType())());")
    #else
      $MT.addBody("out = new byte[inputStream.readInt()];")
      $MT.addBody("inputStream.read(out);")
      $MT.addBody("this.$storeField.name = new ${storeField.type}();")
      $MT.addBody("(this.$storeField.name).record2object(out);")
    #end
  #end

  $CT.addMethod($MT, $tagDic.getPrefix())
#end


##
##
#****** Macro #dbo_gen_toString******
# Function: Generates the toString() method
*#
#macro(dbo_gen_toString)
  #set($MT = $vdoclet.makeBean("mobcon.ct.MethodTemplate"))
  $MT.setAccess("public")
  $MT.setType("String")
  $MT.setName("toString")

  #set($body = "return ${st}${st}")
  #foreach ($field in $storeVec)
    #set($body = "${body}+this.${field.name}+${st} / ${st}")
  #end

  $MT.addBody("${body}+${st}${st};")
  $CT.addMethod($MT)
#end


##
##
#****** Macro dbo_gen_validate******
# Function: Generates the isValid-Method, if there are Fields to validate
*#
#macro(dbo_gen_validate)
  #if(!$pkVec.isEmpty())
    #set($MT = $vdoclet.makeBean("mobcon.ct.MethodTemplate"))
    $MT.setAccess("public")
    $MT.setType("boolean")
    $MT.setName("isValid")
    #set($count = 0)
    $MT.addBody("if(")
    #foreach ($pk in $pkVec)
      #if($count != 0)
        #if($pk.getType() == "java.lang.String")
          $MT.addBody("|| (get$StringUtils.capitalizeFirstLetter($pk.Name)().equals(${MAINCT.getName()}.All$StringUtils.capitalizeFirstLetter($pk.Name)))")
        #else
          $MT.addBody("|| (get$StringUtils.capitalizeFirstLetter($pk.Name)() == ${MAINCT.getName()}.All$StringUtils.capitalizeFirstLetter($pk.Name))")
        #end
      #else
        #if($pk.getType() == "java.lang.String")
         $MT.addBody("(get$StringUtils.capitalizeFirstLetter($pk.Name)().equals(${MAINCT.getName()}.All$StringUtils.capitalizeFirstLetter($pk.Name)))")
        #else
         $MT.addBody("(get$StringUtils.capitalizeFirstLetter($pk.Name)() == ${MAINCT.getName()}.All$StringUtils.capitalizeFirstLetter($pk.Name))")
        #end
      #end
      #set($count = $count +1)
    #end
    $MT.addBody(") return false;")
    $MT.addBody("return true;")
    $CT.addMethod($MT)
  #end

  #if($pkVec.isEmpty())
    #set($MT = $vdoclet.makeBean("mobcon.ct.MethodTemplate"))
    $MT.setAccess("public")
    $MT.setType("boolean")
    $MT.setName("isValid")
    $MT.addBody("return true;")
    $CT.addMethod($MT)
  #end
  
#end
#****** END MACROS ******#


##
##
##
##
#************************#
#******* WORKFLOW *******#
#************************#

$CT.addImport("mobcon.message.*")
$CT.addImport("mobcon.storeables.*")
$CT.addImport("javax.microedition.rms.*")
$CT.addImport("java.io.DataOutputStream")
$CT.addImport("java.io.ByteArrayOutputStream")
$CT.addImport("java.io.IOException")
$CT.addImport("java.io.ByteArrayInputStream")
$CT.addImport("java.io.DataInputStream")
$CT.addImport("java.io.EOFException")
$CT.addImport("java.util.*")
$CT.addInterface("Storeable")

#************************#
#*** Reading the Tags ***#
#************************#

#foreach ($field in $class.fields)
  ## Collect the primary keys
  #set($tag = false)
  #set($tag = $field.getTag($tagDic.getTag("primarykey")))
  #if ($tag)
    $pkVec.addElement($field)
  #end
  #dbo_gen_field ($field)
 
  $storeVec.addElement($field)
#end

#dbo_gen_compare ($field $tag.value)

## Generate the Constructors, validaters and store methods
#dbo_gen_constructor ($class)
#if($pkVec.size() != 0)
  #dbo_gen_validate()
#else
  #set($MT = $vdoclet.makeBean("mobcon.ct.MethodTemplate"))
  $MT.setAccess("public")
  $MT.setType("boolean")
  $MT.setName("isValid")
  $MT.addBody("return true;")
  $CT.addMethod($MT)
#end
#if($storeVec.size() != 0)
  #dbo_gen_object2record()
  #dbo_gen_record2object()
  #dbo_gen_accessMeths()
#else
  #set($MT = $vdoclet.makeBean("mobcon.ct.MethodTemplate"))
  $MT.setAccess("public")
  $MT.setType("byte[]")
  $MT.setName("object2record")
  $MT.addException("IOException")
  #set($FT = $vdoclet.makeBean("mobcon.ct.FieldTemplate"))
  $FT.setType("ByteArrayOutputStream")
  $FT.setName("baos")
  $FT.setValue("new ByteArrayOutputStream()")
  $MT.addField($FT)
  #set($FT = $vdoclet.makeBean("mobcon.ct.FieldTemplate"))
  $FT.setType("DataOutputStream")
  $FT.setName("outputStream")
  $FT.setValue("new DataOutputStream(baos)")
  $MT.addField($FT)
  $MT.addEnd("return baos.toByteArray();")
  $CT.addMethod($MT)

  #set($MT = $vdoclet.makeBean("mobcon.ct.MethodTemplate"))
  $MT.setAccess("public")
  $MT.setType("void")
  $MT.setName("record2object")
  #set($FT = $vdoclet.makeBean("mobcon.ct.FieldTemplate"))
  $FT.setType("byte[]")
  $FT.setName("rec")
  $MT.addParameter($FT)
  $MT.addException("Exception")
  $CT.addMethod($MT)
#end

#dbo_gen_toString()

#****** END WORKFLOW *******#

## Add the storeObject to the transformer's mobileClassTemplates
$transformer.addMobileClassTemplate($CT)

##*************************************#
##******* Output of the STORE *********#
##*************************************#
#set($CTS = $vdoclet.makeBean("mobcon.ct.ClassTemplate"))
$CTS.addImport("mobcon.message.*")
$CTS.addImport("mobcon.storeables.*")
$CTS.addImport("javax.microedition.rms.*")
$CTS.addImport("java.io.DataOutputStream")
$CTS.addImport("java.io.ByteArrayOutputStream")
$CTS.addImport("java.io.IOException")
$CTS.addImport("java.io.ByteArrayInputStream")
$CTS.addImport("java.io.DataInputStream")
$CTS.addImport("java.io.EOFException")
$CTS.addImport("java.util.*")

$CTS.setAccess("public")
$CTS.setName("$class.getShortName()Store")
$CTS.addInterface("RecordFilter")
$CTS.addInterface("RecordComparator")

#set($FT = $vdoclet.makeBean("mobcon.ct.FieldTemplate"))
$FT.setAccess("private")
$FT.setType("RecordStore")
$FT.setName("recordStore")
$FT.setValue("null")
$CTS.addField($FT)

#set($FT = $vdoclet.makeBean("mobcon.ct.FieldTemplate"))
$FT.setAccess("private")
$FT.setType("$class.shortName")
$FT.setName("filter")
$FT.setValue("null")
$CTS.addField($FT)

#set($FT = $vdoclet.makeBean("mobcon.ct.FieldTemplate"))
$FT.setAccess("private ")
$FT.setType("String")
$FT.setName("storeName")
#set($tag = false)
#set($tag = $class.getTag($tagDic.getTag("storeName")))
#if ($tag)
  $FT.setValue("${st}${tag.value}${st}")
#else
  $FT.setValue("${st}${class.name}${st}")
#end
$CTS.addField($FT)

#set($FT = $vdoclet.makeBean("mobcon.ct.FieldTemplate"))
$FT.setAccess("private ")
$FT.setType("boolean")
$FT.setName("checkAll")
$FT.setValue("false")
$CTS.addField($FT)

#************ Constructor **********#
#set($MT = $vdoclet.makeBean("mobcon.ct.MethodTemplate"))
$MT.setAccess("public")
$MT.setName("${class.shortName}Store")
$CTS.addMethod($MT)

#************ initStore **********#
#set($MT = $vdoclet.makeBean("mobcon.ct.MethodTemplate"))
$MT.setAccess("public")
$MT.setType("RecordStore")
$MT.setName("initStore")
$MT.addException("RecordStoreException")
$MT.addBody("if(!isInited()) recordStore = RecordStore.openRecordStore(storeName, true);")
$MT.addBody("return recordStore;")
$CTS.addMethod($MT)

#************ closeStore **********#
#set($MT = $vdoclet.makeBean("mobcon.ct.MethodTemplate"))
$MT.setAccess("public")
$MT.setType("void")
$MT.setName("closeStore")
$MT.addException("Exception")
$MT.addBody("if(isInited()){")
$MT.addBody("recordStore.closeRecordStore();")
$MT.addBody("recordStore = null;")
$MT.addBody("}")
$CTS.addMethod($MT)

#************ deleteStore **********#
#set($MT = $vdoclet.makeBean("mobcon.ct.MethodTemplate"))
$MT.setAccess("public")
$MT.setType("void")
$MT.setName("deleteStore")
$MT.addException("Exception")
$MT.addBody("if(!isInited()) RecordStore.deleteRecordStore(storeName);")
$CTS.addMethod($MT)

#************ isInited **********#
#set($MT = $vdoclet.makeBean("mobcon.ct.MethodTemplate"))
$MT.setAccess("public")
$MT.setType("boolean")
$MT.setName("isInited")
$MT.addBody("return ((recordStore == null) ? false : true);")
$CTS.addMethod($MT)

#************ matches **********#
#set($MT = $vdoclet.makeBean("mobcon.ct.MethodTemplate"))
$MT.setAccess("public")
$MT.setType("boolean")
$MT.setName("matches")
#set($FT = $vdoclet.makeBean("mobcon.ct.FieldTemplate"))
$FT.setType("byte[]")
$FT.setName("rec")
$MT.addParameter($FT)
$MT.addBody("if(filter == null) return false; // none")
$MT.addBody("boolean result = true;")
$MT.addBody("if(checkAll){")


#set($count = 0)
$MT.addBody("if(");
#foreach ($field in $class.fields)
  #if($count == 0)
    #if($field.getType() == "java.lang.String")
      $MT.addBody("(filter.get$StringUtils.capitalizeFirstLetter($field.Name)().equals(${class.shortName}.All$StringUtils.capitalizeFirstLetter($field.Name)))")
    #else
      $MT.addBody("(filter.get$StringUtils.capitalizeFirstLetter($field.Name)() == ${class.shortName}.All$StringUtils.capitalizeFirstLetter($field.Name))")
    #end
  #else
    #if($field.getType() == "java.lang.String")
      $MT.addBody("&& (filter.get$StringUtils.capitalizeFirstLetter($field.Name)().equals(${class.shortName}.All$StringUtils.capitalizeFirstLetter($field.Name)))")
    #else
      $MT.addBody("&& (filter.get$StringUtils.capitalizeFirstLetter($field.Name)() == ${class.shortName}.All$StringUtils.capitalizeFirstLetter($field.Name))")
    #end
  #end
  #set($count = $count + 1)
#end

$MT.addBody(") return true;")
$MT.addBody("${class.shortName} storeObject = new ${class.shortName}();")
$MT.addBody("try {")
$MT.addBody("storeObject.record2object(rec);")
$MT.addBody("} catch(Exception ex) {")
$MT.addBody("return false;")
$MT.addBody("}")

#foreach ($field in $class.fields)
  #if($field.getType() == "java.lang.String")
    $MT.addBody("if(!filter.get$StringUtils.capitalizeFirstLetter($field.Name)().equals(${class.shortName}.All$StringUtils.capitalizeFirstLetter($field.Name))){")
    $MT.addBody("result = result")
    $MT.addBody("& (storeObject.get$StringUtils.capitalizeFirstLetter($field.Name)().equals(filter.get$StringUtils.capitalizeFirstLetter($field.Name)()));")
  #else
    $MT.addBody("if(filter.get$StringUtils.capitalizeFirstLetter($field.Name)() != ${class.shortName}.All$StringUtils.capitalizeFirstLetter($field.Name)){")
    $MT.addBody("result = result")
    $MT.addBody("& (storeObject.get$StringUtils.capitalizeFirstLetter($field.Name)() == filter.get$StringUtils.capitalizeFirstLetter($field.Name)());")
  #end
  $MT.addBody("}")
#end


$MT.addBody("}else{")
#if($pkVec.size() != 0)
  #set($count = 0)
  $MT.addBody("if(");
  #foreach ($pk in $pkVec)
    #if($count == 0)
      #if($pk.getType() == "java.lang.String")
        $MT.addBody("(filter.get$StringUtils.capitalizeFirstLetter($pk.Name)().equals(${class.shortName}.All$StringUtils.capitalizeFirstLetter($pk.Name)))")
      #else
        $MT.addBody("(filter.get$StringUtils.capitalizeFirstLetter($pk.Name)() == ${class.shortName}.All$StringUtils.capitalizeFirstLetter($pk.Name))")
      #end
    #else
      #if($pk.getType() == "java.lang.String")
        $MT.addBody("&& (filter.get$StringUtils.capitalizeFirstLetter($pk.Name)().equals(${class.shortName}.All$StringUtils.capitalizeFirstLetter($pk.Name)))")
      #else
        $MT.addBody("&& (filter.get$StringUtils.capitalizeFirstLetter($pk.Name)() == ${class.shortName}.All$StringUtils.capitalizeFirstLetter($pk.Name))")
      #end
    #end
    #set($count = $count + 1)
  #end
  $MT.addBody(") return true;")
#end
$MT.addBody("${class.shortName} storeObject = new ${class.shortName}();")
$MT.addBody("try {")
$MT.addBody("storeObject.record2object(rec);")
$MT.addBody("} catch(Exception ex) {")
$MT.addBody("return false;")
$MT.addBody("}")

#if($pkVec.size() != 0)
  #foreach ($pk in $pkVec)
    #if($pk.getType() == "java.lang.String")
      $MT.addBody("if(!filter.get$StringUtils.capitalizeFirstLetter($pk.Name)().equals(${class.shortName}.All$StringUtils.capitalizeFirstLetter($pk.Name))){")
      $MT.addBody("result = result")
      $MT.addBody("& (storeObject.get$StringUtils.capitalizeFirstLetter($pk.Name)().equals(filter.get$StringUtils.capitalizeFirstLetter($pk.Name)()));")
    #else
      $MT.addBody("if(filter.get$StringUtils.capitalizeFirstLetter($pk.Name)() != ${class.shortName}.All$StringUtils.capitalizeFirstLetter($pk.Name)){")
      $MT.addBody("result = result")
      $MT.addBody("& (storeObject.get$StringUtils.capitalizeFirstLetter($pk.Name)() == filter.get$StringUtils.capitalizeFirstLetter($pk.Name)());")
    #end
    $MT.addBody("}")
  #end
#end
$MT.addBody("}")

$MT.addBody("return result;")
$CTS.addMethod($MT)

#************ compare **********#
#set($MT = $vdoclet.makeBean("mobcon.ct.MethodTemplate"))
$MT.setAccess("public")
$MT.setType("int")
$MT.setName("compare")
#set($FT = $vdoclet.makeBean("mobcon.ct.FieldTemplate"))
$FT.setType("byte[]")
$FT.setName("rec1")
$MT.addParameter($FT)
#set($FT = $vdoclet.makeBean("mobcon.ct.FieldTemplate"))
$FT.setType("byte[]")
$FT.setName("rec2")
$MT.addParameter($FT)
$MT.addBody("try {")
$MT.addBody("${class.shortName} o1 = new ${class.shortName}();")
$MT.addBody("o1.record2object(rec1);")
$MT.addBody("${class.shortName} o2 = new ${class.shortName}();")
$MT.addBody("o2.record2object(rec2);")
$MT.addBody("return o1.compare(o2);")
$MT.addBody("} catch(Exception ex) {")
$MT.addBody("return RecordComparator.EQUIVALENT;")
$MT.addBody("}")
$CTS.addMethod($MT)

#************ store **********#
#set($MT = $vdoclet.makeBean("mobcon.ct.MethodTemplate"))
$MT.setAccess("public")
$MT.setType("int")
$MT.setName("store")
#set($FT = $vdoclet.makeBean("mobcon.ct.FieldTemplate"))
$FT.setType("${class.shortName}")
$FT.setName("o")
$MT.addParameter($FT)
$MT.addException("Exception")
$MT.addBody("if(this.isInited() && (o != null) && o.isValid()) {")
$MT.addBody("int id = getRecordID(o);")
$MT.addBody("byte[] b = o.object2record();")
$MT.addBody("if(id < 0) {")
$MT.addBody("return recordStore.addRecord(b, 0, b.length);")
$MT.addBody("} else {")
$MT.addBody("recordStore.setRecord(id, b, 0, b.length);")
$MT.addBody("return id;")
$MT.addBody("}")
$MT.addBody("}")
$MT.addBody("return -1;")
$CTS.addMethod($MT)

#************ store2 **********#
#set($MT = $vdoclet.makeBean("mobcon.ct.MethodTemplate"))
$MT.setAccess("public")
$MT.setType("int")
$MT.setName("remove")
#set($FT = $vdoclet.makeBean("mobcon.ct.FieldTemplate"))
$FT.setType("${class.shortName}")
$FT.setName("o")
$MT.addParameter($FT)
$MT.addException("Exception")
$MT.addBody("int count = 0;")
$MT.addBody("RecordEnumeration re = retrieve2(o, false);")
$MT.addBody("while (re.hasNextElement()) {")
$MT.addBody("count++;")
$MT.addBody("recordStore.deleteRecord(re.nextRecordId());")
$MT.addBody("}")
$MT.addBody("return count;")
$CTS.addMethod($MT)

#************ retrieve **********#
#set($MT = $vdoclet.makeBean("mobcon.ct.MethodTemplate"))
$MT.setAccess("public")
$MT.setType("Vector")
$MT.setName("retrieve")
#set($FT = $vdoclet.makeBean("mobcon.ct.FieldTemplate"))
$FT.setType("${class.shortName}")
$FT.setName("o")
$MT.addParameter($FT)
#set($FT = $vdoclet.makeBean("mobcon.ct.FieldTemplate"))
$FT.setType("boolean")
$FT.setName("sorted")
$MT.addParameter($FT)
$MT.addException("Exception")
$MT.addBody("RecordEnumeration re = retrieve2(o, sorted);")
$MT.addBody("Vector result = new Vector();")
$MT.addBody("while(re.hasNextElement())")
$MT.addBody("{")
$MT.addBody("int id = re.nextRecordId();")
$MT.addBody("${class.shortName} el = new ${class.shortName}();")
$MT.addBody("el.record2object(recordStore.getRecord(id));")
$MT.addBody("result.addElement(el);")
$MT.addBody("}")
$MT.addBody("return result;")
$CTS.addMethod($MT)

#************ retrieve2 **********#
#set($MT = $vdoclet.makeBean("mobcon.ct.MethodTemplate"))
$MT.setAccess("public")
$MT.setType("RecordEnumeration")
$MT.setName("retrieve2")
#set($FT = $vdoclet.makeBean("mobcon.ct.FieldTemplate"))
$FT.setType("${class.shortName}")
$FT.setName("o")
$MT.addParameter($FT)
#set($FT = $vdoclet.makeBean("mobcon.ct.FieldTemplate"))
$FT.setType("boolean")
$FT.setName("sorted")
$MT.addParameter($FT)
$MT.addException("Exception")
$MT.addBody("setFilter(o);")
$MT.addBody("return recordStore.enumerateRecords(this, (sorted) ? this : null, true);")
$CTS.addMethod($MT)

#************ set/getFilter **********#
#set($MT = $vdoclet.makeBean("mobcon.ct.MethodTemplate"))
$MT.setAccess("public")
$MT.setType("void")
$MT.setName("setFilter")
#set($FT = $vdoclet.makeBean("mobcon.ct.FieldTemplate"))
$FT.setType("${class.shortName}")
$FT.setName("o")
$MT.addParameter($FT)
$MT.addBody("filter = o;")
$CTS.addMethod($MT)
#set($MT = $vdoclet.makeBean("mobcon.ct.MethodTemplate"))
$MT.setAccess("public")
$MT.setType("${class.shortName}")
$MT.setName("getFilter")
$MT.addBody("return this.filter;")
$CTS.addMethod($MT)

#************ getRecordID **********#
#set($MT = $vdoclet.makeBean("mobcon.ct.MethodTemplate"))
$MT.setAccess("public")
$MT.setType("int")
$MT.setName("getRecordID")
#set($FT = $vdoclet.makeBean("mobcon.ct.FieldTemplate"))
$FT.setType("${class.shortName}")
$FT.setName("o")
$MT.addParameter($FT)
$MT.addException("Exception")
$MT.addBody("if(!o.isValid()) return -1;")
$MT.addBody("RecordEnumeration re = retrieve2(o, true);")
$MT.addBody("if(re.hasNextElement()){")
$MT.addBody("return re.nextRecordId();")
$MT.addBody("}")
$MT.addBody("return -1;")
$CTS.addMethod($MT)

#************ exists **********#
#set($MT = $vdoclet.makeBean("mobcon.ct.MethodTemplate"))
$MT.setAccess("public")
$MT.setType("boolean")
$MT.setName("exists")
#set($FT = $vdoclet.makeBean("mobcon.ct.FieldTemplate"))
$FT.setType("${class.shortName}")
$FT.setName("o")
$MT.addParameter($FT)
$MT.addBody("boolean tmp = true;")
$MT.addBody("checkAll = true;")
$MT.addBody("try {")
$MT.addBody("if(getRecordID(o) < 0) tmp = false;")
$MT.addBody("checkAll = false;")
$MT.addBody("return tmp;")
$MT.addBody("} catch(Exception ex) {")
$MT.addBody("checkAll = false;")
$MT.addBody("return false;")
$MT.addBody("}")
$CTS.addMethod($MT)

#************ storeToString **********#
#set($MT = $vdoclet.makeBean("mobcon.ct.MethodTemplate"))
$MT.setAccess("public")
$MT.setType("String")
$MT.setName("storeToString")
$MT.addBody("${class.shortName} storeObject = new ${class.shortName}();")
$MT.addBody("String out = ${st}${st};")
$MT.addBody("try {")
$MT.addBody("RecordEnumeration re = recordStore.enumerateRecords(null, this, true);")
$MT.addBody("while(re.hasNextElement()) {")
$MT.addBody("try{")
$MT.addBody("storeObject.record2object(re.nextRecord());")
$MT.addBody("out = out+${st}\n${st}+storeObject.toString();")
$MT.addBody("}catch(Exception e){System.out.println(e);}")
$MT.addBody("}")
$MT.addBody("return out;")
$MT.addBody("} catch (RecordStoreException rse) {")
$MT.addBody("rse.printStackTrace();")
$MT.addBody("return rse.toString();")
$MT.addBody("}")
$CTS.addMethod($MT)

## Add the store to the transformer's mobileClassTemplates
$transformer.addMobileClassTemplate($CTS)

$PREVERIFY.add("mobcon.message.Storeable ");
$PREVERIFY.add("mobcon.storeables.StoreableStringArray ");
$PREVERIFY.add("mobcon.storeables.StoreableStringHashtable ");
$PREVERIFY.add("mobcon.storeables.StoreableStringData ");
## End concern-tag
#end
