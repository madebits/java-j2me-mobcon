########
# DOCS #
########


USAGE:
-------------------
- PASSWORD for the application mobray is "pwd"

Application source:
-------------------
The source-files are the files which will be transformed in the process. They are decorated with tags 
defined by the tag-dictionaries. They tell the generator what concerns will be generated and what to 
do with fields and methods...
Untagged code (Methods and fields) will be copied as they are. Untagged method-bodies that extend 
generated methods, will be appended to the end of the generated methods. Method-bodies that begin 
with the tag "@begin", will be appended to the beginning of the generated methods.

- Tag before class, shows MobCon which transformers to apply
- JavaDoc Tag decorated code
- Generally there are only fields decorated with tags
- Untagged code/field will be copied as it is

  
Transforming Process:
---------------------
-   The engine looks up for any Java-Source-Files in the src-directory
-   Then it searches for transformers (JAR-Files) in the plugin-directory
-   The transformers-jar-files are opened and the dependency-structure with workflow are build from the 
    information provided by the manifest-file or, if there is a file named de-pedn.xml in the 
    plugin-directory, the dependency-structure provided in depend.xml is used.
-   The result of this is a number of TransformerGroups, which can consist of one or more transformers. 
    Transformers that are in the same TransformerGroup will be processed in parallel.
-   Then, according to the workflow, one TransformerGroup after another will be executed. 
    All transformers in one group are executed in parallel. Each TransformerGroup and each Transformer 
    hold their own ClassTemplates, which result on the transforming process.  
-   The transformers read their dictionaries to know which tags are used in the Java-sources to 
    represent properties
-   Depending on the class-tags (they tell us which concern to apply) of the Java-Sources, 
    the different transformers are applied to them
-   They parse the Java-Sources, using the vDoclet parsed object tree of the tag marked Java-Sources 
    and the Class Templates to generate classes, methodes, fields... depend-ing on the tags in the 
    Java-Sources. For each Transformer and each TransformerGroup there is one ClassTemplate
-   When all the Transformers in a TransformerGroup are executed, the ClassTemplates in the 
    Transformers are mixed together, according to the methods specified in  MixTem-plate-Classes, 
    and the resulting ClassTemplate is stored in the TransformerGroup
-   When all TransformerGroups are executed, the ClassTemplates of the Transformer-Groups are mixed 
    together according to the methods specified in  MixTemplate-Classes. The result is one final 
    ClassTemplate
-   Finally the Java-Class is generated using the final ClassTemplate, which represents it

Usage of the input-file:
------------------------
-   The base-class and the interfaces in the class-definition will be in the transformed output-file, 
    too.
-   All fields that are tagged will be transformed by the specified transformers. All fields that are
    not tagged won’t be transformed and copied as they are to the output-file.
-   Methods will be copied to the output-file.
-   Changes to methods that would be generated by any of the transformers can be done, when you define 
    that method in your input-file. The inserted method-body will be copied to the end off the generated 
    method-body. When you tag your method with "@begin", then the content will be inserted at the 
    beginning of the method.
-   The file will be processed by a transformer, when the right transformer-tag (for example @dp) 
    is specified before the class.


dir-structure:
--------------

aplications
|
|---mobray(first sample application)
    |
    |---build(batch commands)
    |
    |---classes (place of the compiled sources)
    |   |
    |   |---mobile
    |   |   |
    |   |   |---app (JAD-file and JAR-file for the mobile application)
    |   |   |
    |   |   |---bin (compiled mobile-sources)
    |   |
    |   |---server
    |       |
    |       |---app (JAR-file for the server-side application)
    |       |
    |       |---output (compiled server-sources)
    |
    |---demo (place of the demoserver and demomobile)
    |       |
    |       |---mobile (demo mobile)
    |       |
    |       |---server (demo server)
    |
    |---descriptor (place of the deployment descriptor)
    |
    |---lib (place of the used libraries)
    |   |
    |   |---plugins(used transformer-JARs)  
    |       |
    |       |---MixTemplate (place of the mix-template)
    |
    |---resources (place of additional files, that are used in the application)
    |   |
    |   |---mobile (files are put in the mobile-JAR)
    |   |
    |   |---server (files are put in the server-JAR)
    |
    |---src (place of the mobcon sources)
        |
        |---mobile (sources for the mobile)
        |
        |---server (sources for the server)
        |
        |---addSources (additional sources)
            |
            |---mobile (additional sources for the mobile)
            |
            |---server (additional sources for the server)


